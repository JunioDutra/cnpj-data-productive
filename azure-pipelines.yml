trigger:
- main
- master

pool:
  name: Default

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'
  repositoryPrefix: '192.168.2.185:5000'
  repository: 'app_web_admin'
  repositoryProxy: 'api-proxy'
  projectNamespace: 'cnpj-data'

stages:
- stage: BuildProxy
  displayName: Build Proxy image
  jobs: 
  - job: BuildProxy
    displayName: Build Proxy
    steps:
    - script: |
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - task: Cache@2
      displayName: Cache task
      inputs:
        key: 'docker | "$(Agent.OS)" | cache'
        path: $(Pipeline.Workspace)/docker
        cacheHitVar: CACHE_RESTORED
    - script: |
        docker load -i $(Pipeline.Workspace)/docker/cache.tar
        sed -i "s/latest/$(tag)/g" manifests/proxy.yaml
      displayName: Docker restore
      condition: and(not(canceled()), eq(variables.CACHE_RESTORED, 'true'))
    - task: Docker@2
      inputs:
        containerRegistry: 'docker-service-connection'
        repository: '$(repositoryProxy)'
        command: 'buildAndPush'
        Dockerfile: 'api_proxy/Dockerfile'
        tags: |
          $(tag)
          latest
    - script: |
        echo "eval test"
        mkdir -p $(Pipeline.Workspace)/docker
        docker save -o $(Pipeline.Workspace)/docker/cache.tar "$(repositoryPrefix)/$(repositoryProxy):$(Build.BuildId)"
        docker save -o $(Pipeline.Workspace)/docker/cache.tar "$(repositoryPrefix)/$(repositoryProxy):latest"
      displayName: Docker save
      condition: and(not(canceled()), or(failed(), ne(variables.CACHE_RESTORED, 'true')))
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)/s/manifests'
        artifact: 'manifests'
        publishLocation: 'pipeline'
- stage: DeployProxy
  displayName: Deploy Proxy
  dependsOn: BuildProxy
  jobs:
  - job: DeployProxy
    displayName: Deploy Proxy
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'manifests'
        targetPath: '$(Pipeline.Workspace)/manifests'
    - task: KubernetesManifest@0
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'k3s'
        namespace: '$(projectNamespace)'
        manifests: '$(Pipeline.Workspace)/manifests/proxy.yaml'
- stage: BuildApp
  displayName: Build app image
  jobs: 
  - job: BuildApp
    displayName: Build App
    steps:
    - script: |
        # register QEMU binary - this can be done by running the following image
        # docker run --privileged --rm tonistiigi/binfmt --install all
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - task: Cache@2
      displayName: Cache task
      inputs:
        key: 'docker | "$(Agent.OS)" | cache'
        path: $(Pipeline.Workspace)/docker
        cacheHitVar: CACHE_RESTORED
    - script: |
        docker load -i $(Pipeline.Workspace)/docker/cache.tar
        sed -i "s/latest/$(tag)/g" manifests/app.yaml
      displayName: Docker restore
      condition: and(not(canceled()), eq(variables.CACHE_RESTORED, 'true'))
    - task: Docker@2
      inputs:
        containerRegistry: 'docker-service-connection'
        repository: '$(repository)'
        command: 'buildAndPush'
        Dockerfile: 'cnpj-data-admin/infrastructure/Dockerfile'
        tags: |
          $(tag)
          latest
    - script: |
        echo "eval test"
        mkdir -p $(Pipeline.Workspace)/docker
        docker save -o $(Pipeline.Workspace)/docker/cache.tar "$(repositoryPrefix)/$(repository):$(Build.BuildId)"
        docker save -o $(Pipeline.Workspace)/docker/cache.tar "$(repositoryPrefix)/$(repository):latest"
      displayName: Docker save
      condition: and(not(canceled()), or(failed(), ne(variables.CACHE_RESTORED, 'true')))
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)/s/manifests'
        artifact: 'manifests'
        publishLocation: 'pipeline'
- stage: DeployApp
  displayName: Deploy App
  dependsOn: BuildApp
  jobs:
  - job: DeployApp
    displayName: Deploy App
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'manifests'
        targetPath: '$(Pipeline.Workspace)/manifests'
    - task: KubernetesManifest@0
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'k3s'
        namespace: '$(projectNamespace)'
        manifests: '$(Pipeline.Workspace)/manifests/app.yaml'
